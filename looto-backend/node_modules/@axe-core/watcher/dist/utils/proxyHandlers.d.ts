import type Controller from '../Controller';
import { type PlaywrightController } from '../playwright/playwright';
declare const kWrapped: unique symbol;
export type PossiblyWrapped<T> = T & {
    [kWrapped]?: boolean;
};
/** Is the given object wrapped? */
export declare const isWrapped: <T>(o: PossiblyWrapped<T> | null) => boolean;
/** Mark the given object as wrapped. */
export declare const markAsWrapped: (o: unknown) => void;
export declare const proxiedGetFuncWithAnalyze: <T>(target: T, prop: keyof T, controller: Controller) => (...args: unknown[]) => Promise<unknown>;
export declare const proxiedGetFuncWithAnalyzeWrapped: <T>(target: T, prop: keyof T, controller: PlaywrightController) => (...args: unknown[]) => Promise<unknown>;
export declare const proxiedGetWithoutAnalyze: <T>(target: T, prop: keyof T) => unknown;
export {};
