"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const headlessNotSupportedError_1 = require("./headlessNotSupportedError");
const newHeadlessPlaywrightNotSupportedError_1 = require("./newHeadlessPlaywrightNotSupportedError");
function validateHeadlessPlaywright({ isPlaywrightTest, playwrightConfig }) {
    const preHeadlessChangeMessage = () => `'In ${isPlaywrightTest ? '@playwright-test' : 'Playwright'}, include "--headless=new" in the "args" property of your options instead of using "headless: true',`;
    try {
        const playwrightCoreVersion = require('playwright-core/package.json').version;
        const [major, minor] = playwrightCoreVersion.split('.').map(Number);
        if (major === 1 && minor <= 48) {
            if (playwrightConfig.headless) {
                throw new headlessNotSupportedError_1.HeadlessNotSupportedError(preHeadlessChangeMessage());
            }
            validatePlaywrightChannel(playwrightConfig.channel);
            return;
        }
        if (playwrightConfig.headless === undefined) {
            throw new newHeadlessPlaywrightNotSupportedError_1.HeadlessPlaywrightNotSupportedError('@axe-core/watcher is not supported in chromium-headless-shell mode.');
        }
        if (playwrightConfig.headless && !playwrightConfig.channel) {
            throw new newHeadlessPlaywrightNotSupportedError_1.HeadlessPlaywrightNotSupportedError('@axe-core/watcher requires either fully headed mode or new headless mode.');
        }
        validatePlaywrightChannel(playwrightConfig.channel);
    }
    catch (error) {
        if (error instanceof headlessNotSupportedError_1.HeadlessNotSupportedError ||
            error instanceof newHeadlessPlaywrightNotSupportedError_1.HeadlessPlaywrightNotSupportedError) {
            throw error;
        }
        if (playwrightConfig.headless) {
            throw new headlessNotSupportedError_1.HeadlessNotSupportedError(preHeadlessChangeMessage());
        }
    }
}
function validatePlaywrightChannel(channel) {
    const SUPPORTED_CHANNELS = ['chromium', 'chrome'];
    if (channel && !SUPPORTED_CHANNELS.includes(channel)) {
        throw new newHeadlessPlaywrightNotSupportedError_1.HeadlessPlaywrightNotSupportedError('@axe-core/watcher requires either fully headed mode or new headless mode.');
    }
}
exports.default = validateHeadlessPlaywright;
//# sourceMappingURL=validateHeadlessPlaywright.js.map