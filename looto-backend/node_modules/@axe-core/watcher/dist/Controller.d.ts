import type { Debugger } from 'debug';
import { type Variables } from './utils/writeVariables';
import { type AxeCoreSettings } from './utils/initializeSession';
interface ControllerParams {
    /** The namespace for the debug logger. */
    debugLoggerName: string;
    /** The name of the integration. Used for variables assertion */
    integrationName?: string;
    /** Configuration function name. Use for variables assertion */
    configurationFunction?: string;
}
interface ControllerActionOptions {
    timeout?: number;
}
declare abstract class Controller {
    protected abstract executeScript<A = unknown, T = void>(fn: string | ((...args: A[]) => Promise<T>), ...args: unknown[]): Promise<T>;
    protected isStopped: boolean;
    protected debugLogger: Debugger;
    protected timeout: Variables['timeout'];
    protected axeCoreSettings?: AxeCoreSettings;
    protected runOptions?: Variables['run_options'];
    constructor({ debugLoggerName, integrationName, configurationFunction }: ControllerParams);
    start({ timeout }?: ControllerActionOptions): Promise<void>;
    stop({ timeout }?: ControllerActionOptions): Promise<void>;
    analyze({ __Method, __UserRequestedAnalyze }?: {
        __Method?: string;
        __UserRequestedAnalyze?: boolean;
    }, { timeout }?: ControllerActionOptions): Promise<void>;
    flush({ timeout }?: ControllerActionOptions): Promise<void>;
}
export default Controller;
